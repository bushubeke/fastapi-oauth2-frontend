/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import LoginUserModel from '../model/LoginUserModel';
import RoleModel from '../model/RoleModel';
import RoleModelAll from '../model/RoleModelAll';
import RolesUsersModel from '../model/RolesUsersModel';
import UserModel from '../model/UserModel';
import UserModelAll from '../model/UserModelAll';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addUserRolesAdminAddrolesPost operation.
     * @callback module:api/DefaultApi~addUserRolesAdminAddrolesPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add User Roles
     * @param {module:model/RolesUsersModel} rolesUsersModel 
     * @param {module:api/DefaultApi~addUserRolesAdminAddrolesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addUserRolesAdminAddrolesPost(rolesUsersModel, callback) {
      let postBody = rolesUsersModel;
      // verify the required parameter 'rolesUsersModel' is set
      if (rolesUsersModel === undefined || rolesUsersModel === null) {
        throw new Error("Missing the required parameter 'rolesUsersModel' when calling addUserRolesAdminAddrolesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/admin/addroles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllRolesAdminRoleAllDelete operation.
     * @callback module:api/DefaultApi~deleteAllRolesAdminRoleAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete All Roles
     * @param {module:api/DefaultApi~deleteAllRolesAdminRoleAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAllRolesAdminRoleAllDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/admin/role/all', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllUserAdminUserAllDelete operation.
     * @callback module:api/DefaultApi~deleteAllUserAdminUserAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete All User
     * @param {module:api/DefaultApi~deleteAllUserAdminUserAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAllUserAdminUserAllDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/admin/user/all', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRoleAdminRoleItemIdDelete operation.
     * @callback module:api/DefaultApi~deleteRoleAdminRoleItemIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Role
     * @param {Number} itemId 
     * @param {module:api/DefaultApi~deleteRoleAdminRoleItemIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteRoleAdminRoleItemIdDelete(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling deleteRoleAdminRoleItemIdDelete");
      }

      let pathParams = {
        'item_id': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/admin/role/{item_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserAdminUserItemUuidDelete operation.
     * @callback module:api/DefaultApi~deleteUserAdminUserItemUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete User
     * @param {String} itemUuid 
     * @param {module:api/DefaultApi~deleteUserAdminUserItemUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteUserAdminUserItemUuidDelete(itemUuid, callback) {
      let postBody = null;
      // verify the required parameter 'itemUuid' is set
      if (itemUuid === undefined || itemUuid === null) {
        throw new Error("Missing the required parameter 'itemUuid' when calling deleteUserAdminUserItemUuidDelete");
      }

      let pathParams = {
        'item_uuid': itemUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/admin/user/{item_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserRolesAdminDeleterolesRoleIdUserIdDelete operation.
     * @callback module:api/DefaultApi~deleteUserRolesAdminDeleterolesRoleIdUserIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete User Roles
     * @param {Number} roleId 
     * @param {Number} userId 
     * @param {module:api/DefaultApi~deleteUserRolesAdminDeleterolesRoleIdUserIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteUserRolesAdminDeleterolesRoleIdUserIdDelete(roleId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling deleteUserRolesAdminDeleterolesRoleIdUserIdDelete");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserRolesAdminDeleterolesRoleIdUserIdDelete");
      }

      let pathParams = {
        'role_id': roleId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/admin/deleteroles/{role_id}/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllRolesAdminRolesAllGet operation.
     * @callback module:api/DefaultApi~getAllRolesAdminRolesAllGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleModelAll>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Roles
     * @param {module:api/DefaultApi~getAllRolesAdminRolesAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleModelAll>}
     */
    getAllRolesAdminRolesAllGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleModelAll];
      return this.apiClient.callApi(
        '/admin/roles/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllUsersAdminUsersAllGet operation.
     * @callback module:api/DefaultApi~getAllUsersAdminUsersAllGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserModelAll>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Users
     * @param {module:api/DefaultApi~getAllUsersAdminUsersAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserModelAll>}
     */
    getAllUsersAdminUsersAllGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserModelAll];
      return this.apiClient.callApi(
        '/admin/users/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoleAdminRoleItemIdGet operation.
     * @callback module:api/DefaultApi~getRoleAdminRoleItemIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleModelAll} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Role
     * @param {Number} itemId 
     * @param {module:api/DefaultApi~getRoleAdminRoleItemIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleModelAll}
     */
    getRoleAdminRoleItemIdGet(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getRoleAdminRoleItemIdGet");
      }

      let pathParams = {
        'item_id': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoleModelAll;
      return this.apiClient.callApi(
        '/admin/role/{item_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserAdminUserItemUuidGet operation.
     * @callback module:api/DefaultApi~getUserAdminUserItemUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User
     * @param {String} itemUuid 
     * @param {module:api/DefaultApi~getUserAdminUserItemUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserModel}
     */
    getUserAdminUserItemUuidGet(itemUuid, callback) {
      let postBody = null;
      // verify the required parameter 'itemUuid' is set
      if (itemUuid === undefined || itemUuid === null) {
        throw new Error("Missing the required parameter 'itemUuid' when calling getUserAdminUserItemUuidGet");
      }

      let pathParams = {
        'item_uuid': itemUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserModel;
      return this.apiClient.callApi(
        '/admin/user/{item_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexGet operation.
     * @callback module:api/DefaultApi~indexGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Index
     * @param {module:api/DefaultApi~indexGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    indexGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginTokenAdminTokenPost operation.
     * @callback module:api/DefaultApi~loginTokenAdminTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login Token
     * @param {String} username 
     * @param {String} password 
     * @param {Object} opts Optional parameters
     * @param {String} opts.grantType 
     * @param {String} opts.scope  (default to '')
     * @param {String} opts.clientId 
     * @param {String} opts.clientSecret 
     * @param {module:api/DefaultApi~loginTokenAdminTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    loginTokenAdminTokenPost(username, password, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling loginTokenAdminTokenPost");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling loginTokenAdminTokenPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'grant_type': opts['grantType'],
        'username': username,
        'password': password,
        'scope': opts['scope'],
        'client_id': opts['clientId'],
        'client_secret': opts['clientSecret']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/admin/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginUserAdminLoginPost operation.
     * @callback module:api/DefaultApi~loginUserAdminLoginPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login User
     * @param {module:model/LoginUserModel} loginUserModel 
     * @param {module:api/DefaultApi~loginUserAdminLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    loginUserAdminLoginPost(loginUserModel, callback) {
      let postBody = loginUserModel;
      // verify the required parameter 'loginUserModel' is set
      if (loginUserModel === undefined || loginUserModel === null) {
        throw new Error("Missing the required parameter 'loginUserModel' when calling loginUserAdminLoginPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/admin/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerRolesAdminRoleRegisterPost operation.
     * @callback module:api/DefaultApi~registerRolesAdminRoleRegisterPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register Roles
     * @param {module:model/RoleModel} roleModel 
     * @param {module:api/DefaultApi~registerRolesAdminRoleRegisterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    registerRolesAdminRoleRegisterPost(roleModel, callback) {
      let postBody = roleModel;
      // verify the required parameter 'roleModel' is set
      if (roleModel === undefined || roleModel === null) {
        throw new Error("Missing the required parameter 'roleModel' when calling registerRolesAdminRoleRegisterPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/admin/role/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerUserAdminUserRegisterPost operation.
     * @callback module:api/DefaultApi~registerUserAdminUserRegisterPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register User
     * @param {module:model/UserModel} userModel 
     * @param {module:api/DefaultApi~registerUserAdminUserRegisterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    registerUserAdminUserRegisterPost(userModel, callback) {
      let postBody = userModel;
      // verify the required parameter 'userModel' is set
      if (userModel === undefined || userModel === null) {
        throw new Error("Missing the required parameter 'userModel' when calling registerUserAdminUserRegisterPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/admin/user/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testOauth2AdminTestoauthGet operation.
     * @callback module:api/DefaultApi~testOauth2AdminTestoauthGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test Oauth2
     * @param {module:api/DefaultApi~testOauth2AdminTestoauthGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    testOauth2AdminTestoauthGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/admin/testoauth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoleAdminRoleupdateItemIdPut operation.
     * @callback module:api/DefaultApi~updateRoleAdminRoleupdateItemIdPutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Role
     * @param {Number} itemId 
     * @param {module:model/RoleModelAll} roleModelAll 
     * @param {module:api/DefaultApi~updateRoleAdminRoleupdateItemIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateRoleAdminRoleupdateItemIdPut(itemId, roleModelAll, callback) {
      let postBody = roleModelAll;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling updateRoleAdminRoleupdateItemIdPut");
      }
      // verify the required parameter 'roleModelAll' is set
      if (roleModelAll === undefined || roleModelAll === null) {
        throw new Error("Missing the required parameter 'roleModelAll' when calling updateRoleAdminRoleupdateItemIdPut");
      }

      let pathParams = {
        'item_id': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/admin/roleupdate/{item_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserAdminUserroleItemUuidPut operation.
     * @callback module:api/DefaultApi~updateUserAdminUserroleItemUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update User
     * @param {String} itemUuid 
     * @param {module:model/UserModel} userModel 
     * @param {module:api/DefaultApi~updateUserAdminUserroleItemUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateUserAdminUserroleItemUuidPut(itemUuid, userModel, callback) {
      let postBody = userModel;
      // verify the required parameter 'itemUuid' is set
      if (itemUuid === undefined || itemUuid === null) {
        throw new Error("Missing the required parameter 'itemUuid' when calling updateUserAdminUserroleItemUuidPut");
      }
      // verify the required parameter 'userModel' is set
      if (userModel === undefined || userModel === null) {
        throw new Error("Missing the required parameter 'userModel' when calling updateUserAdminUserroleItemUuidPut");
      }

      let pathParams = {
        'item_uuid': itemUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/admin/userrole/{item_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
